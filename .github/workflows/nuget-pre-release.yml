name: Pre-Release Nuget Packages on Nuget.org

on: [push, pull_request]

jobs:
  pre-release-nuget:
    runs-on: windows-latest
    env:
      GtkSharpVersion: 3.24.24.117-develop
      GtkSharpManifestVersion: 8.0.200
      DotnetVersion: 8.0.200
    steps:
      - name: Checkout MAUI repository
        uses: actions/checkout@v4
      
      - name: Setup .NET SDK ${{ env.DotnetVersion }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DotnetVersion }}

      # - name: Setup MSYS2
      #   uses: msys2/setup-msys2@v2

      # - name: Install gtk3
      #   shell: msys2 {0}
      #   run: |
      #       pacman -S mingw-w64-x86_64-gtk3 --noconfirm
      #       echo "C:\\msys64\\mingw64\\bin" >> $GITHUB_PATH
      #       echo "C:\\msys64\\usr\\bin" >> $GITHUB_PATH

      # - uses: Vampire/setup-wsl@v3

      # - name: Install gtk workload
      #   shell: wsl-bash_Debian {0}
      #   run: |
      #       sudo apt install wget -y
      #       wget https://packages.microsoft.com/config/debian/12/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
      #       sudo dpkg -i packages-microsoft-prod.deb
      #       rm packages-microsoft-prod.deb
      #       sudo apt-get update
      #       sudo apt-get install -y dotnet-sdk-8.0
      #       dotnet workload install maui
      #       
      #       # For some reason automatic workload manifest detection doesn't work (see https://github.com/GtkSharp/GtkSharp/issues/355#issuecomment-1446262239), so download and uzip mainfest file manually
      #       dotnet nuget add source --name nuget.org "https://api.nuget.org/v3/index.json"
      #       wget https://www.nuget.org/api/v2/package/gtksharp.net.sdk.gtk.manifest-${{ env.GtkSharpManifestVersion }}/$GtkSharpVersion -O gtksharp.net.sdk.gtk.manifest-${{ env.GtkSharpManifestVersion }}.nupkg            
      #       DOTNET_DIR=/home/runner/.dotnet
      #       WORKLOAD_MANIFEST_DIR=$DOTNET_DIR/sdk-manifests/${{ env.DotnetVersion }}/gtksharp.net.sdk.gtk
      #       mkdir -p $WORKLOAD_MANIFEST_DIR
      #       unzip -j gtksharp.net.sdk.gtk.manifest-${{ env.GtkSharpManifestVersion }}.nupkg "data/*" -d $WORKLOAD_MANIFEST_DIR/
      #       rm gtksharp.net.sdk.gtk.manifest-${{ env.GtkSharpManifestVersion }}.nupkg
      #       chmod 764 $WORKLOAD_MANIFEST_DIR/*
      #       dotnet workload search
      #       dotnet workload install gtk --skip-manifest-update

      - name: Setup JDK and Android-SDK
        continue-on-error: true
        run: |
            if ($env:JAVA_HOME_11_X64) {
              $env:JAVA_HOME = $env:JAVA_HOME_11_X64
            } else {
              $path = (Get-ChildItem $env:ProgramFiles\Microsoft\jdk-11.*\bin\java.exe) | Select-Object -First 1
              if ($path -and (Test-Path $path)) {
                $env:JAVA_HOME = $path.Directory.Parent.FullName
              }
            }
            if ($env:JAVA_HOME) {
                echo "##vso[task.setvariable variable=JAVA_HOME]$env:JAVA_HOME"
                echo "JAVA_HOME set to '$env:JAVA_HOME'"
            } else {
                echo "Unable to set JAVA_HOME"
            }

            if ($env:ANDROID_SDK_ROOT) {
              echo "ANDROID_SDK_ROOT already set to '$env:ANDROID_SDK_ROOT'"
            } else {
              if ((Test-Path "${env:ProgramFiles(x86)}\Android\android-sdk")) {
                $env:ANDROID_SDK_ROOT = "${env:ProgramFiles(x86)}\Android\android-sdk"
              }
              if ($env:ANDROID_SDK_ROOT) {
                echo "##vso[task.setvariable variable=ANDROID_SDK_ROOT]$env:ANDROID_SDK_ROOT"
                echo "ANDROID_SDK_ROOT set to '$env:ANDROID_SDK_ROOT'"
              } else {
                echo "Unable to set ANDROID_SDK_ROOT"
              }
            }

      - shell: bash
        run: |
            # sed -i 's/_IncludeAndroid>true/_IncludeAndroid>/g' Directory.Build.Override.props
            sed -i 's|./bin|C:/Program Files|g' eng/cake/dotnet.cake
            sed -i '/<clear \/>/a \ \ \ \ <add key="nuget.org" value="https://api.nuget.org/v3/index.json" />' NuGet.Config
            ./eng/common/SetupNugetSources.ps1

      - name: Install maui workloads
        run: |
            Invoke-WebRequest 'https://raw.githubusercontent.com/Samsung/Tizen.NET/main/workload/scripts/workload-install.ps1' -OutFile 'workload-install.ps1';
            ./workload-install.ps1
            # dotnet workload install maui macos android ios maccatalyst maui-desktop maui-mobile maui-android
            dotnet workload install macos
            dotnet workload restore
            dotnet workload search
            dotnet workload list

      - name: Pack
      #   shell: wsl-bash_Debian {0}
        continue-on-error: true
        run: |
            $env:DOTNET_ROOT = "C:\Program Files\dotnet"
            $env:PATH += ";C:\Program Files\dotnet"
            ./build.ps1 --target=dotnet --configuration="Release" --verbosity=diagnostic --nugetsource="artifacts"
            ./build.ps1 --target=dotnet-pack --configuration="Release" --verbosity=diagnostic --nugetsource="artifacts" --property:PackageVersion=${{ env.DotnetVersion }}-preview${{ github.sha }}
            ./build.ps1 --target=dotnet-diff --configuration="Release" --verbosity=diagnostic

      - name: Push
        run: |
            ls artifacts
            dotnet nuget push artifacts/**/*.nupkg -s https://api.nuget.org/v3/index.json -k ${{ secrets.NUGET_API_KEY }}
        env:
          GITHUB_TOKEN: ${{ secrets.NUGET_API_KEY }}
